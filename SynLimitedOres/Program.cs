using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using System.Collections.Generic;
using Noggog;

namespace SynLimitedOres
{
    public class Program
    {
        static Lazy<Settings> _LazySettings = null!;
        static Settings Settings => _LazySettings.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _LazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "LimitedOres.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {


            List<IActivatorGetter> Activators = state.LoadOrder.PriorityOrder.Activator().WinningOverrides()
                .Where(a => a.VirtualMachineAdapter != null && a.VirtualMachineAdapter.Scripts.Select(x => x.Name).Any(n => n == "MineOreScript")).ToList();
            var ActivatorFormKeys = Activators.Select(x => x.FormKey).ToHashSet();
             var exteriorCellFormKeys = new HashSet<FormKey> ();

            foreach (var cell in state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(state.LinkCache))
            {
                if (cell.TryGetParent(out IWorldspaceGetter? world) && world != null)
                {
                    exteriorCellFormKeys.Add(cell.Record.FormKey );
                }
            }

            var References = state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(state.LinkCache).Where(m => ActivatorFormKeys.Contains(m.Record.Base.FormKey)).ToList();
            var ReferenceFormKeys = References.Select(x => x.Record.FormKey).ToHashSet();

            List<Mutagen.Bethesda.Plugins.FormLink<IKeywordGetter>> KeywordUnderground = new(){
                Skyrim.Keyword.LocSetCave,
                Skyrim.Keyword.LocSetCaveIce,
                Skyrim.Keyword.LocSetDwarvenRuin,
                Skyrim.Keyword.LocTypeDwarvenAutomatons,
                Skyrim.Keyword.LocSetNordicRuin,
                Skyrim.Keyword.LocTypeDraugrCrypt
            };


            var LocMines = state.LoadOrder.PriorityOrder.Location().WinningOverrides().Where(x => x.HasKeyword(Skyrim.Keyword.LocTypeMine)).ToList();
            var LocMinesFormKeys = LocMines.Select(x => x.FormKey).ToHashSet();
            var LocOtherUnderground = state.LoadOrder.PriorityOrder.Location().WinningOverrides().Where(x => x.HasAnyKeyword(KeywordUnderground)).ToList();
            var LocOtherUndergroundFormKeys = LocOtherUnderground.Select(x => x.FormKey).ToHashSet();

            var InteriorCells = state.LoadOrder.PriorityOrder.Cell().WinningOverrides().Where(x => !exteriorCellFormKeys.Contains(x.FormKey)).ToList();

            var MineCells = InteriorCells.Where(x => LocMinesFormKeys.Contains(x.Location.FormKey)).ToList();
            var MineCellFormKeys = MineCells.Select(x => x.FormKey).ToHashSet(); 
            var OtherUndergroundCells = InteriorCells.Where(x =>LocOtherUndergroundFormKeys.Contains(x.Location.FormKey) && !MineCells.Contains(x)).ToList();
            var OtherUndergroundCellFormKeys = OtherUndergroundCells.Select(x => x.FormKey).ToHashSet();
            foreach ( var oRef in References)
            {
                bool nonRespawning = true;
                if (oRef.TryGetParent(out ICellGetter? parentcell) && parentcell!=null)
                {
                    if (Settings.RespawningMines && MineCellFormKeys.Contains(parentcell.FormKey))
                        nonRespawning = false;
                    if (Settings.RespawningOtherUnderground && OtherUndergroundCellFormKeys.Contains(parentcell.FormKey))
                        nonRespawning = false;
                }
                if (nonRespawning)
                {
                    IPlacedObject copiedPlacedObject = oRef.GetOrAddAsOverride(state.PatchMod);
                    copiedPlacedObject.MajorRecordFlagsRaw = copiedPlacedObject.MajorRecordFlagsRaw | 0x40000000;
                }
            }

        }
    }
}
